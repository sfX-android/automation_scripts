---

# git stuff
axp_git_repo: "git@github.com:AXP-OS/build.git"
axp_main_branch: axp
git_repo_local_manifests: "https://github.com/AXP-OS/manifest.git"
git_repo_local_manifests_branch: "{{ ROM_FLAVOR }}-{{ android_shortversion }}"
# main LOS manifest
git_repo_main_manifests: "https://github.com/LineageOS/android.git"
# install tea cli: wget https://dl.gitea.com/tea/main/tea-main-linux-amd64 -O ~/.local/bin/tea && chmod +x ~/.local/bin/tea
# create token for a bot user. must have at least these permissions: write:organization, write:repository, read:user
# login once: tea login add --name repocr --url https://code.binbash.rocks:8443 --token xxxxx
# the login name used in "tea login add" command
gitea_login_name: repocr
# the organization name within git(ea):
git_axpos_org_name: "AXP.OS"
# just push changes after patching, skip build
just_git_push: False
# private git URI (incl org) for creating/updating repos for AXP.OS
git_axpos_org_private: "ssh://git@code.binbash.rocks:22443/{{ git_axpos_org_name }}"
# list of private repos within the AXP.OS org
# reasons for listing them here are e.g. they get rejected on github, containing proprietary stuff or sim.
# comma separated list:
git_private_repos: "platform_prebuilts_tools"

# build vars
os_name: "AXP.OS"
#los_version: "{{ android_shortversion | replace('a13','20.0') | replace('a12','19.1') | replace('a11','18.1') | replace('a10','17.1') | replace('a9','16.0') }}"
#git_repo_main_branch: "lineage-{{ los_version }}"
git_repo_main_branch: "{{ los_version_gitbranch }}"
#DOSPATH: "/home/androidsource/do-not-touch/{{ ROM_FLAVOR }}"
DOSPATH: "/ssd2/androidsource/do-not-touch/{{ ROM_FLAVOR }}"
# SRCPATH HAS TO be part of DOSPATH - this is a divestOS limitation and cannot be changed
# If you need to use a different path for any reason you can use symlinks for the "LineageOS-XX" folders
# but ensure you leave the directory structure intact then
SRCPATH: "{{ DOSPATH }}/Build/LineageOS-{{ los_version }}"

axp_finalzip_dir: "{{ ZIPDIR }}/LineageOS-{{ los_version }}/release_keys/"
JKZIPDIR: "{{ axp_finalzip_dir }}"
USE_CCACHE: 1
rempath: "/home/nightlies/roms/{{ ROM_FLAVOR }}/{{ target_model }}/"
RELEASE_TYPE: dos
ROM_VERSION: "{{ build_id }}"
PREFIXFNAME: "{{ os_name }}-{{ los_version }}"
axp_recovery_filename: "{{ PREFIXFNAME }}-RECOVERY-{{ build_id }}.img"
# if set to true (in your env or anywhere else) an -eng build will be created instead of a -user one
axp_build_eng: false
# should we verify all build images via the created vbmeta.img?
vbmeta_verify: True
# directories to be cleaned on a clean build
axp_clean_paths:
    - "{{ SRCPATH }}/DOS_PATCHED_FLAG"
    - "{{ SRCPATH }}/packages/apps/Fennec_DOS-Shim"
    - "{{ SRCPATH }}/vendor/divested"
    - "{{ SRCPATH }}/vendor/fdroid_prebuilt"
    - "{{ SRCPATH }}/packages/apps/SupportDivestOS"
    - "{{ SRCPATH }}/vendor/oneplus"
    - "{{ SRCPATH }}/vendor/samsung"
    - "{{ SRCPATH }}/hardware/oplus"
    - "{{ SRCPATH }}/hardware/samsung"
    - "{{ SRCPATH }}/external/firebase-messaging"
    - "{{ SRCPATH }}/kernel"
    - "{{ SRCPATH }}/device"
# allow to (manually) set selinux permissive
axp_allow_permissive: True

# kernel patching
divest_cve_checker_download: "https://gitlab.com/divested-mobile/cve_checker/-/jobs/4820813129/artifacts/raw/build/libs/cve_checker-0.6.8.jar?inline=false"
divest_cve_checker_jar: "{{ BUILDHOME }}/cve_checker.jar"
divest_unsupported_device: false    # should be overwritten in a device's vars/main.yml if needed
unsupported_device_kernel_patch: true    # enable kernel patching by default, overwrite in semaphore if needed

# extendrom stuff
use_extendrom: "true"
extendrom_package_list_default: "Phonesky_AXP-OS additional_repos.xml Magisk AuroraStore MicrogGmsCore_GH GsfProxy_GH noeSpeakNG NeoLauncher-latest"
#extendrom_package_list_default: "Phonesky_AXP-OS_testing additional_repos.xml Magisk AuroraStore MicrogGmsCore_GH GsfProxy_GH noeSpeakNG NeoLauncher-latest"
extendrom_fdroid_repos: "molly.xml nailyk.xml threema.xml futo_org.xml"
extendrom_preroot_boot: "true"
extendrom_signature_spoofing: "true"
#extendrom_sigspoof_force_dir: "vendor/extendrom/config/sigspoof/{{ ROM_FLAVOR }}/{{ android_shortversion | upper() }}"
#sh: export EXTENDROM_SIGSPOOF_FORCE_PDIR={{ extendrom_sigspoof_force_dir }}
extendrom_patcher_reset: "false"  # as this resets divest patches (e.g. boot animation)
extendrom_boot_debug: "true"
extendrom_signing_patches: 'true'

# keys
KEYS_CN: "{{ os_name }}"
KEYS_SIZE: 8192
KEYS_HASHTYPE: sha512
keysdir: "{{ DOSPATH }}/Signing_Keys/4096pro/{{ target_model }}/"

# notification vars
build_tag: "{{ ansible_date_time.year }}-{{ ansible_date_time.month }}-{{ ansible_date_time.day }}_{{ target_model }}_{{ android_shortversion }}"

device_cl: |-
  ***{{ target_model_full | regex_escape() }}*** ***\({{ target_model | regex_escape() }}\)*** \- ***{{ ROM_FLAVOR | regex_escape() }}***

rom_cl: |-
  ***Changes:***
  \- AXP\.OS: [Changelog](https://github.com/AXP-OS/build/wiki/Changelog)

dl_links: |-
  ***Download:*** [{{ ROMFILE.stdout | regex_escape() }} ]({{ leech_server }}/{{ ROM_FLAVOR }}/{{ target_model }})

ota_hint: |-
  ***OTA Update:*** supported

# Divest has some very weird behavior as it is only compatible with fedora officially
# one of the reasons is that /bin/sh points to /bin/bash there and divest uses /bin/sh
# everywhere(no idea why!) and another example is the tool "rename" which is different
# in fedora then in other distros (at least Ubuntu). The following fixes all known issues
# with divest due to its non-standard behavior and inits DOS as it should be
DOS_INIT: |
    echo "BUILDHOME: {{ BUILDHOME }}"
    export HOME="{{ BUILDHOME }}" && echo "home set to $HOME" >> {{ BUILD_LOG }}
    export BDEVICE="{{ target_model }}"
    export PATH="{{ BUILDHOME }}/.local/bin:$HOME/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
    if [ ! -L "$HOME/.local/bin/sh" ];then ln -s /bin/bash $HOME/.local/bin/sh; fi
    if [ ! -L "$HOME/.local/bin/rename" ];then ln -s {{ SRCPATH }}/rename $HOME/.local/bin/rename; fi
    alias sh=/bin/bash
    alias rename="{{ SRCPATH }}/rename"
    cd {{ SRCPATH }}
    source build/envsetup.sh >> {{ BUILD_LOG }} 2>&1 && echo "sourcing envsetup: success" >> {{ BUILD_LOG }}
    source {{ DOSPATH }}/Scripts/init.sh >> {{ BUILD_LOG }} 2>&1 && echo "sourcing init: success" >> {{ BUILD_LOG }}

# we do not want to generate a fastboot factory image by default (override in semaphore if needed)
generate_pixel_factory_image: False

# get & upload a recovery image
axp_release_recovery: False

# enable the following in a device's vars file with:
#custom_build_command: "{{ SH_COMMON_PIXEL_CREATE_FACTORY }}"
#generate_pixel_factory_image: True (in semaphore)
SH_COMMON_PIXEL_CREATE_FACTORY: |
        {% if axp_build_eng | bool %}
        mka sepolicy
        buildDeviceDebug {{ target_model }}
        {% else %}
        buildDevice {{ target_model }}
        {% endif %}
        {% if generate_pixel_factory_image | bool %}
        
        # this will create a fastboot flashable factory image
        # containing the official Google images + AXP.OS based on vendor/firmware/{{ target_model }}/0SOURCE
        VERSION="{{ los_version }}-{{ BUILDIDENT }}-dos"
        source vendor/firmware/{{ target_model }}/0SOURCE
        if [ -f out/{{ target_model }}-factory.zip ];then rm out/{{ target_model }}-factory.zip;fi
        wget -q https://dl.google.com/dl/android/aosp/{{ target_model }}-${FACTORYID}-factory-${FACTORYIDHASH}.zip -O out/{{ target_model }}-factory.zip || (wget https://dl.google.com/dl/android/aosp/{{ target_model }}-${FACTORYID}-factory-${FACTORYIDHASH}.zip -O out/{{ target_model }}-factory.zip ; exit 9)
        cd out/target/product/{{ target_model }}
        if [ -d factory ];then rm -rf factory;fi
        if [ -f {{ os_name }}-${VERSION}-factory.zip ];then rm {{ os_name }}-${VERSION}-factory.zip;fi
        unzip {{ SRCPATH }}/out/{{ target_model }}-factory.zip -x "*/image-{{ target_model }}-*.zip" -d factory
        cd factory/{{ target_model }}-${FACTORYID}
        cp ../../{{ os_name }}-$VERSION-{{ target_model }}-fastboot.zip image-{{ target_model }}-${FACTORYID}.zip
        cp {{ SRCPATH }}/user-keys/avb_pkmd.bin .
        for f in flash-base.sh flash-all.sh;do
            awk '{print} /fastboot reboot-bootloader/ && !n {print "sleep 5\nfastboot erase avb_custom_key\nfastboot flash avb_custom_key avb_pkmd.bin\nfastboot reboot-bootloader"; n++}' $f > $f.tmp && mv $f.tmp $f && chmod +x $f
        done
        awk '{print} /fastboot reboot-bootloader/ && !n {print "ping -n 5 127.0.0.1 >nul\nfastboot erase avb_custom_key\nfastboot flash avb_custom_key avb_pkmd.bin\nfastboot reboot-bootloader"; n++}' flash-all.bat > bat.tmp && mv bat.tmp flash-all.bat && chmod +x flash-all.bat
        cd ..
        zip -r ../{{ os_name }}-${VERSION}-{{ target_model }}-factory.zip {{ target_model }}-${FACTORYID}
        cd ..
        sha256sum {{ os_name }}-${VERSION}-{{ target_model }}-factory.zip > {{ os_name }}-${VERSION}-{{ target_model }}-factory.zip.sha256
        cd {{ SRCPATH }}
        {% endif %}

# the build script which will be executed after all the resets, syncs and patching have been done
SH_COMMON_BUILD_SNIPPET: |
        #!/bin/bash
        ####################################################################################################################
        
        # be strict on failures
        set -e

        # fix build errors
        export LC_ALL=C
        
        # unset any extendrom var
        unset EXTENDROM_DEBUG_PATH EXTENDROM_BOOT_DEBUG EXTENDROM_PREROOT_BOOT ENABLE_EXTENDROM EXTENDROM_PACKAGES PREROOT_BOOT
        unset EXTENDROM_DEBUG_PATH_SIZE_FULL EXTENDROM_DEBUG_PATH_SIZE_KERNEL EXTENDROM_DEBUG_PATH_SIZE_SELINUX 
        unset EXTENDROM_DEBUG_PATH_SIZE_CRASH EXTENDROM_SIGNATURE_SPOOFING EXTENDROM_SIGSPOOF_FORCE_PDIR EXTENDROM_PATCHER_RESET
        unset EXTENDROM_SIGNING_PATCHES EXTENDROM_PACKAGES_SKIP_DL

        ########################### PREPARE #########################

        # set legacy python2 env - if needed
        # 1. sudo apt-get install python2 virtualenv python2-pip-whl python2-setuptools-whl
        # 2. mkdir -p ~/.venv/python2
        # 3. virtualenv --python=$(which python2) ~/.venv/python2
        case {{ android_shortversion }} in
            a9|a10) source ~/.venv/python2/bin/activate ;;
        esac

        ########################### BUILD #########################
        
        # setup build env including stupid DOS workarounds
        {{ DOS_INIT }}
        {% if axp_build_eng | bool %}
        breakfast lineage_{{ target_model }}-eng
        {% else %}
        breakfast lineage_{{ target_model }}-user
        {% endif %}
        
        # CCACHE
        export USE_CCACHE={{ USE_CCACHE }}
        if [ "{{ USE_CCACHE }}" -eq 1 ];then
            export CCACHE_EXEC=/usr/bin/ccache
            export CCACHE_COMPRESS={{ CCACHE_COMPRESS }}
            mkdir -p {{ CCACHE_DIR }}
            export CCACHE_DIR="{{ CCACHE_DIR }}"
            {{ CCACHE_EXEC }} --max-size=10G
        fi
        
        # extendrom flags
        export ENABLE_EXTENDROM={{ use_extendrom }}
        export EXTENDROM_PACKAGES="{{ extendrom_package_list | d(extendrom_package_list_default) }}"
        export EXTENDROM_FDROID_REPOS="{{ extendrom_fdroid_repos }}"
        {% if extendrom_packages_skip_dl is defined %}export EXTENDROM_PACKAGES_SKIP_DL={{ extendrom_packages_skip_dl }}{% endif %}
        export EXTENDROM_PREROOT_BOOT={{ extendrom_preroot_boot }}
        export MAGISK_TARGET_ARCH=arm64
        export EXTENDROM_BOOT_DEBUG={{ extendrom_boot_debug }}
        export EXTENDROM_DEBUG_PATH={{ extendrom_debug_path |d (extendrom_debug_path_default) }}
        export EXTENDROM_DEBUG_PATH_SIZE_FULL={{ extendrom_debug_path_size_full | d(extendrom_debug_path_size_full_default) }}
        export EXTENDROM_DEBUG_PATH_SIZE_KERNEL={{ extendrom_debug_path_size_kernel | d(extendrom_debug_path_size_kernel_default) }}
        export EXTENDROM_DEBUG_PATH_SIZE_SELINUX={{ extendrom_debug_path_size_selinux | d(extendrom_debug_path_size_selinux_default) }}
        export EXTENDROM_DEBUG_PATH_SIZE_CRASH={{ extendrom_debug_path_size_crash | d(extendrom_debug_path_size_crash_default) }}
        export EXTENDROM_SIGNATURE_SPOOFING={{ extendrom_signature_spoofing }}
        export EXTENDROM_PATCHER_RESET={{ extendrom_patcher_reset }}
        export EXTENDROM_SIGNING_PATCHES={{ extendrom_signing_patches }}
        # execute extendrom
        $PWD/vendor/extendrom/er.sh
        
        # build
        resetEnv
        {% if (override_clean_out == "undef" and clean_out == "true") or (override_clean_out == "true") %}
        mka generate_verity_key
        {% endif %}
        {% if axp_build_recovery_only is defined and axp_build_recovery_only %}
        mka recoveryimage
        if [ ! -d {{ JKZIPDIR }} ]; then mkdir -p {{ JKZIPDIR }};fi
        mv -v out/target/product/{{ target_model }}/recovery.img {{ JKZIPDIR }}/{{ axp_recovery_filename }}
        {% elif custom_build_command is defined %}
        {{ custom_build_command }}
        {% elif axp_build_eng | bool %}
        mka sepolicy
        buildDeviceDebug {{ target_model }}
        {% else %}
        buildDevice {{ target_model }}
        {% endif %}
        {% if vbmeta_verify %}
        # See: https://source.android.com/docs/security/features/verifiedboot/boot-flow 
        FPID=$(cat user-keys/avb_pkmd.bin | openssl dgst -sha256 | cut -d "=" -f 2 | tr -d " " | tr "[[:lower:]]" "[[:upper:]]")
        echo -e "\nBOOTLOADER minimal ID"
        echo -e "\t${FPID:0:8}\n"
        echo -e "BOOTLOADER full ID:"
        echo -e "\t${FPID:0:16}"
        echo -e "\t${FPID:16:16}"
        echo -e "\t${FPID:32:16}"
        echo -e "\t${FPID:48:16}\n"
        out/host/linux-x86/bin/avbtool info_image --image out/target/product/{{ target_model }}/obj/PACKAGING/target_files_intermediates/lineage_{{ target_model }}-target_files-eng.emy/IMAGES/vbmeta.img
        out/host/linux-x86/bin/avbtool verify_image --follow_chain_partitions --image out/target/product/{{ target_model }}/obj/PACKAGING/target_files_intermediates/lineage_{{ target_model }}-target_files-eng.emy/IMAGES/vbmeta.img
        {% endif %}

        echo -e "\n\nSUCCESS: You should find your build here:\n{{ JKZIPDIR }}\n"
